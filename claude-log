#!/usr/bin/env bash
#
# claude-log - A wrapper for Claude CLI that logs conversations and auto-summarizes
# https://github.com/dakrin/claude-logger
# Version: 1.2.1 (Cross-Platform Support)
#

# Display version information if requested
VERSION="1.2.1 (Cross-Platform Support)"
if [[ "$1" == "--version" || "$1" == "-v" ]]; then
  echo "claude-log version $VERSION"
  echo "https://github.com/dakrin/claude-logger"
  exit 0
fi

# Check for --nolog option
NOLOG=false
CLAUDE_ARGS=()

# Parse arguments
for arg in "$@"; do
  if [[ "$arg" == "--nolog" ]]; then
    NOLOG=true
  else
    CLAUDE_ARGS+=("$arg")
  fi
done

# If --nolog is specified, just run Claude directly without logging
if $NOLOG; then
  exec claude "${CLAUDE_ARGS[@]}"
  exit $?
fi

LOG_DIR=~/claude-logs
mkdir -p "$LOG_DIR"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
TEMP_LOG=$(mktemp)

# STOP overcomplicating things! Use what works!
# Option 1 in the test script works perfectly for colors

# Two-part strategy:
# 1. Just run claude directly for colors in terminal
# 2. After it's done, generate a log file from the script output

# Create a log file path for script
SCRIPT_LOG=$(mktemp)

# Run claude with script to capture output - handle OS differences
if [[ "$OSTYPE" == "darwin"* ]]; then
  # macOS syntax
  script -q "$SCRIPT_LOG" claude "${CLAUDE_ARGS[@]}"
else
  # Linux syntax
  script -q -c "claude ${CLAUDE_ARGS[*]}" "$SCRIPT_LOG"
fi

# Copy script log to temp log for processing
cp "$SCRIPT_LOG" "$TEMP_LOG"

# Remove ANSI color codes from the log file for cleaner logs
sed -i'.bak' -E 's/\x1b\[[0-9;]*m//g' "$TEMP_LOG"
rm -f "${TEMP_LOG}.bak" "$SCRIPT_LOG"

# Debug - print part of the log to see what we're working with
# echo "Sample from the log:"
# head -20 "$TEMP_LOG"

# Define a function to check if the log contains meaningful interaction
has_meaningful_interaction() {
  local log_file="$1"
  local found_interaction=false
  
  # Simple heuristic based solely on file size
  # If the file is very small, it's likely just a session with "exit"
  local file_size=$(wc -c < "$log_file")
  
  # Threshold value based on observed file sizes
  # Exit-only logs are ~5KB, meaningful logs are >10KB
  local threshold=10000  # 10KB
  
  if [ "$file_size" -gt "$threshold" ]; then
    found_interaction=true
  else
    found_interaction=false
  fi
  
  $found_interaction
}

# Check if the log contains meaningful interaction
if has_meaningful_interaction "$TEMP_LOG"; then
  # User typed something meaningful, save the log
  LOG_FILE="$LOG_DIR/claude-$TIMESTAMP.log"
  cp "$TEMP_LOG" "$LOG_FILE"
  echo -e "\nLogging session to $LOG_FILE"
  
  # Generate a summary
  echo "Generating session summary..."
  
  # Create an extracted version for summarization
  EXTRACTED_LOG=$(mktemp)
  
  # Use simple extraction for now (full extraction logic will be in a future release)
  sed -E 's/\x1b\[[0-9;]*[a-zA-Z]//g' "$LOG_FILE" | grep -E "^Human:|^Assistant:" > "$EXTRACTED_LOG"
  
  # Apply hard limit to ensure minimal API usage (~2000 tokens max)
  MAX_CHARS=8000
  EXTRACTED_SIZE=$(wc -c < "$EXTRACTED_LOG")
  
  if [ "$EXTRACTED_SIZE" -gt "$MAX_CHARS" ]; then
    TRUNCATED_LOG=$(mktemp)
    # Take first third and last third of content
    SEGMENT_SIZE=$((MAX_CHARS / 3))
    
    # First part - beginning of conversation
    head -c $SEGMENT_SIZE "$EXTRACTED_LOG" > "$TRUNCATED_LOG"
    echo -e "\n...[middle content omitted]...\n" >> "$TRUNCATED_LOG"
    
    # Last part - end of conversation
    tail -c $SEGMENT_SIZE "$EXTRACTED_LOG" >> "$TRUNCATED_LOG"
    
    mv "$TRUNCATED_LOG" "$EXTRACTED_LOG"
  fi
  
  # Use the extracted dialogue for summarization
  SUMMARY=$(claude --print "Provide a 1-3 word summary. ONLY 1-3 words. Only respond with the 1-3 words and nothing else. We are using your output in the CLI so do not respond with any other thoughts besides those 1-3 words. Make sure the 1-3 words are separated with a dash and no spaces. Do not include any other thoughts besides the 1-3 words:

$(cat $EXTRACTED_LOG)")
  
  # Clean up
  rm -f "$EXTRACTED_LOG"

  # Extract any word-dash-word pattern or just take the first word as fallback
  if [[ "$SUMMARY" =~ ([a-zA-Z0-9]+-[a-zA-Z0-9]+(-[a-zA-Z0-9]+)?) ]]; then
    SUMMARY="${BASH_REMATCH[1]}"
  else
    SUMMARY=$(echo "$SUMMARY" | head -1 | awk '{print $1}' || echo "claude-log")
  fi

  # Sanitize summary for safe filename use
  echo "Summary: $SUMMARY"
  # Use character classes and individual characters to avoid range issues between macOS and Linux
  SAFE_SUMMARY=$(echo "$SUMMARY" | tr -cd '[:alnum:]_.-')

  # Truncate if too long
  if [ ${#SAFE_SUMMARY} -gt 50 ]; then
    SAFE_SUMMARY="${SAFE_SUMMARY:0:50}"
  fi

  # Append summary to log filename
  FINAL_LOG_FILE="$LOG_DIR/claude-$TIMESTAMP-$SAFE_SUMMARY.log"
  mv "$LOG_FILE" "$FINAL_LOG_FILE"
  echo "Log saved to $FINAL_LOG_FILE"
else
  echo "No logging - session contained no meaningful input"
fi

# Clean up
rm -f "$TEMP_LOG"