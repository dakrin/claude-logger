#!/usr/bin/env bash
#
# claude-log - A wrapper for Claude CLI that logs conversations and auto-summarizes
# https://github.com/dakrin/claude-logger
# Version: 1.3.6 (Cross-Platform Title Extraction)
#

# Display version information if requested
VERSION="1.3.6 (Cross-Platform Title Extraction)"
if [[ "$1" == "--version" || "$1" == "-v" ]]; then
  echo "claude-log version $VERSION"
  echo "https://github.com/dakrin/claude-logger"
  exit 0
fi

# Check for --nolog option
NOLOG=false
CLAUDE_ARGS=()

# Parse arguments
for arg in "$@"; do
  if [[ "$arg" == "--nolog" ]]; then
    NOLOG=true
  else
    CLAUDE_ARGS+=("$arg")
  fi
done

# If --nolog is specified, just run Claude directly without logging
if $NOLOG; then
  exec claude "${CLAUDE_ARGS[@]}"
  exit $?
fi

LOG_DIR=~/claude-logs
mkdir -p "$LOG_DIR"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)

# Create a temporary file for raw output with all escape sequences
RAW_LOG=$(mktemp)

# Run claude with script but preserve all escape sequences
if [[ "$OSTYPE" == "darwin"* ]]; then
  # macOS syntax - use -F to preserve control characters
  script -q -F "$RAW_LOG" claude "${CLAUDE_ARGS[@]}"
else
  # Linux syntax - the -f flag should preserve control characters
  script -q -f "$RAW_LOG" -c "claude ${CLAUDE_ARGS[*]}"
fi

# Process the raw log to create a clean version without ANSI color sequences
CLEAN_LOG=$(mktemp)
cat "$RAW_LOG" | sed 's/\x1b\[[0-9;]*m//g' > "$CLEAN_LOG"

# Extract window titles from escape sequences - check both common formats
# Pattern 1: \033]0;Title\007 (most common)
# Pattern 2: \033]2;Title\007 (used by some terminals)
WINDOW_TITLES_1=$(grep -a -o $'\033]0;[^'$'\007'']*' "$RAW_LOG" | sed 's/\x1b]0;//')
WINDOW_TITLES_2=$(grep -a -o $'\033]2;[^'$'\007'']*' "$RAW_LOG" | sed 's/\x1b]2;//')

# Combine all titles
WINDOW_TITLES="$WINDOW_TITLES_1"$'\n'"$WINDOW_TITLES_2"

# Get the last non-empty title from the list
LAST_TITLE=""
while read -r title; do
  # Only update if we have a non-empty title that's not just spaces
  if [[ -n "$title" && "$title" =~ [^[:space:]] ]]; then
    LAST_TITLE="$title"
  fi
done <<< "$WINDOW_TITLES"

# If we couldn't extract a title, fall back to the current directory
if [[ -z "$LAST_TITLE" ]]; then
  LAST_TITLE="Claude-$(basename "$PWD")"
else
  # Remove the initial "✳ " if present
  LAST_TITLE=${LAST_TITLE#"✳ "}
fi

# Save the log regardless of size
LOG_FILE="$LOG_DIR/claude-$TIMESTAMP.log"
cp "$CLEAN_LOG" "$LOG_FILE"
echo -e "\nLogging session to $LOG_FILE"
echo "Window title: $LAST_TITLE"

# Sanitize title for safe filename use 
SAFE_TITLE=$(echo "$LAST_TITLE" | tr -cd '[:alnum:]_.-')

# Truncate if too long
if [ ${#SAFE_TITLE} -gt 50 ]; then
  SAFE_TITLE="${SAFE_TITLE:0:50}"
fi

# Use window title for log filename
FINAL_LOG_FILE="$LOG_DIR/claude-$TIMESTAMP-$SAFE_TITLE.log"
mv "$LOG_FILE" "$FINAL_LOG_FILE"
echo "Log saved to $FINAL_LOG_FILE"

# Clean up
rm -f "$RAW_LOG" "$CLEAN_LOG"